#!/bin/bash

# Originally tkbash:
# 20170812 tkbash @ https://github.com/phil294/tkbash.git
# eochgls@web.de
#  .___.
#  {o,o}
# /)___)
# --"-"--
# Bundled with RedFlux and renamed to avoid conflicts with exising installations
# So it can safely be patched, cleaned up or terminated without affecting other tkbash applications

set -e

die() {
	echo "call 'redflux-tkbash --help' for help."
	exit "$@"
}

BASH_MINIMUM_VERSION="4.2"
# fixme does not support busybox
#[[ $(sort -V <<< $BASH_VERSION$'\n'$BASH_MINIMUM_VERSION |head -1) != $BASH_MINIMUM_VERSION ]] && echo "Minimum bash version required: $BASH_MINIMUM_VERSION" && die 24
#command -v wish >/dev/null || (echo "You need to have wish (tcl/tk) installed." && die 25)

TMP="/tmp/__redflux-tkbash1.0_"
mkdir -p "$TMP"

show_help() {
	COLOR_BOLD="$(tput bold)"
	COLOR_RESET="$(tput sgr0)"
	echo -e "
>>> ${COLOR_BOLD}TkBash (RedFlux bundled version)${COLOR_RESET}. Basic Bash superset for Tcl/Tk gui. Just a layer,
NO reimplementation of Tk. Place elements using absolute coordinates x/y/w/h.

${COLOR_BOLD}USAGE${COLOR_RESET}:
    ${COLOR_BOLD}redflux-tkbash <gui_id> [<element>] <variable> [-options...]${COLOR_RESET}
        Add / edit element. For basic usage, you dont need anything else.
    ${COLOR_BOLD}redflux-tkbash <gui_id> get <variable>${COLOR_RESET}
        Print the value of the associated element.
    ${COLOR_BOLD}redflux-tkbash <gui_id> [-options...]${COLOR_RESET}
        Set global window properties.

    ${COLOR_BOLD}redflux-tkbash <gui_id> [<variable>] --tkcommand <command>${COLOR_RESET}
        Execute custom Tcl/Tk code. For advanced element configuration not
        provied by redflux-tkbash itself. \"--tkcommand\" can also be \"--tk\". Variable
        can be ommitted for full access. Example:
        \"redflux-tkbash mygui mybutton --tkcommand 'configure -font verdana'\" or
        \"redflux-tkbash mygui --tkcommand 'wm maxsize .w 200 200'\".
        Note: toplevel root window in redflux-tkbash is \".w\".
    ${COLOR_BOLD}[any command...] --debug, --print, --log${COLOR_RESET}
        Print all commands sent to the wish background process (Tcl/Tk code)
        to stderr. For debugging.


        ${COLOR_BOLD}gui_id${COLOR_RESET}
            Unique identifier for the GUI. To be reused with subsequent redflux-tkbash
            calls.
        ${COLOR_BOLD}element${COLOR_RESET}
            Any of the elements listed below. Required when adding a new one.
        ${COLOR_BOLD}variable${COLOR_RESET}
            Variable to hold the value associated with the element.

        When adding an element for the first time, all positional options are
        required (-x, -y, -w, -h). See general element options.

${COLOR_BOLD}Window properties${COLOR_RESET}
Set options for the entire interface / window as described above. You can set
width and height if BOTH are specified (if w and y are also specified, you will
set also the window position).
    ${COLOR_BOLD}--theme${COLOR_RESET} <themename>
        Set the look and feel used by all all elements. Available themes usually
        include clam, alt, default and classic. Important: If you use this
        option, any individual styling to themed elements might be gone and
        needs to be reapplied.
    ${COLOR_BOLD}--title${COLOR_RESET} <title>
        Set the window title.
    ${COLOR_BOLD}--alwaysontop, --topmost${COLOR_RESET} <switch>
        Set the window's always on top behaviour. Activate with 0,
        deactivate with 1.
    ${COLOR_BOLD}--maximize${COLOR_RESET}
        Maxmize the window to fullscreen.
    ${COLOR_BOLD}--alpha, --transparency${COLOR_RESET} <alpha>
        Set the transparency of the entire window. Floating value between 0 and
        1. Note that sometimes, this does not work. You might need to put a
        delay before using this option, for some reason. Try it out.
    ${COLOR_BOLD}--icon${COLOR_RESET} <iconpath>
        Set the window icon.
    ${COLOR_BOLD}--background, --backgroundcolor, --bck, --bg${COLOR_RESET} <color>
        Set the background color for the entire window. You might need to also
        set the background for individual elements for they do not inherit this
        setting. Use common color names like red, yellow etc. or hex notation
        like #ff1234.
    ${COLOR_BOLD}--resizable${COLOR_RESET} <switch>
        Set the window's resizable behaviour. Activate with 0, deactivate with 1.
    ${COLOR_BOLD}--movebymouse, --movewithmouse, --draggable --drag${COLOR_RESET} <switch>
        Enable or disable the ability of the window to be dragged with the mouse
        around the screen. Activate with 0, deactivate with 1. The window can
        only be dragged when the mouse is not hovering over any interactive
        element. Note: If you are looking for drag&drop for external files, text
        etc., see the readme example at the end.
    ${COLOR_BOLD}--iconify${COLOR_RESET}
        Minimize the window.
    ${COLOR_BOLD}--hide${COLOR_RESET}
        Hide the window by detaching it from the Window Manager.
    ${COLOR_BOLD}--show${COLOR_RESET}
        Set the window visible by re-attaching it to the Winodow Manager.
    ${COLOR_BOLD}--close, --exit, --quit, --destroy${COLOR_RESET}
        Close the window programmatically. This is equal to the user pressing
        the X button or pressing alt+f4. Waits until closing operations finished
        (including --onclose commands).
    ${COLOR_BOLD}--hotkey, --bind, --shortcut${COLOR_RESET}
        Add an action to be executed when a key (\"sequence\") is pressed.
        Possible sequences: See https://www.tcl.tk/man/tcl8.4/TkCmd/bind.htm#M5.
        Specify the commands to be executed use the --command option. Example:
        \"redflux-tkbash mygui --hotkey Escape --command 'echo You pressed Escape.'\"
        Also see --command note below.
    ${COLOR_BOLD}--onclose, --onexit${COLOR_RESET}
        Add an action to be executed when the window is closed. Specify the
        commands to be executed using the --command option. Example:
        \"redflux-tkbash mygui --onclose --command 'echo redflux-tkbash now exits.'\"
        The GUI will only exit once the --command has finished. Also see
        --command note below.
    ${COLOR_BOLD}--exist${COLOR_RESET}
        Prints 1 if the specified <gui_id> belongs to a running window, 0
        otherwise.
    ${COLOR_BOLD}--notitlebar, --nobar, --nocaption, --nodecorations, --tooltip, --popup,
    --overrideredirect${COLOR_RESET}
        Important: This option is only considered at window creation. Thus, it
        should be part of the very first redflux-tkbash call made for this <gui_id>.
        - Make the GUI unmapped: The window cannot be moved, typed into, have
        hotkeys assigned etc. The window is automatically always-on-top and does
        not appear in the panel. This option might be interesting for creating a
        tooltip. Appropriate buttons should be configured so the user can
        actually close the window (see window --close).
    ${COLOR_BOLD}--onclick${COLOR_RESET}
        Add an action to be executed when the user clicks anywhere on the gui.
        Specify the commands to be executed using the --command option. Example:
        \"redflux-tkbash mygui --onclick --command 'echo You clicked the window.'\" Also
        see --command note below.

${COLOR_BOLD}ELEMENTS${COLOR_RESET}
    ${COLOR_BOLD}button${COLOR_RESET} / submit / b
        Options:
            ${COLOR_BOLD}-t, --text, --content${COLOR_RESET} <text>
                The text that will be displayed on the button.
            ${COLOR_BOLD}-c, --command${COLOR_RESET} <command>
                Code to be executed when the element is clicked. Also see
                --command note below.
        Get:
            You cannot retrieve any value from a button.
    ${COLOR_BOLD}text${COLOR_RESET} / input / edit / textfield / textarea / t
        A text element is a multiline input area for text.
        Options:
            ${COLOR_BOLD}--scrollbar${COLOR_RESET} <switch>
                Show or hide the vertical scrollbar next to the textfield.
                <switch> is 0 or 1.
            ${COLOR_BOLD}-t, --text, --content${COLOR_RESET} <text>
                Set the contents of the text field.
            ${COLOR_BOLD}--ignore-return, --ignore-newline, --entry, --one-row${COLOR_RESET}
                The user cannot type newlines. If combined with an appropriate
                height, this could also be used as a form input.
        Get:
            Prints the contents of the text field.
    ${COLOR_BOLD}label${COLOR_RESET} / p / l
        A label element displays plain text somewhere on the gui.
        Options:
            ${COLOR_BOLD}-t, --text, --content${COLOR_RESET} <text>
                Set the contents of the label.
        Get:
            You cannot retrieve any value from a label.
    ${COLOR_BOLD}image${COLOR_RESET} / picture / img / bmp / bitmap / i
        Display an image.
        Options:
            ${COLOR_BOLD}--image${COLOR_RESET} <path>
                Path of the image to be shown. Not all formats are supported.
                (yes: png, no: jpg)
        Get:
            You cannot retrieve any value from an image.
        Note: Internally, this does the same like 'label', meaning these two
        element names are interchangeable.
    ${COLOR_BOLD}checkbutton${COLOR_RESET} / checkbox / check / tick / toggle / cb
        For boolean values. If neither --checked nor --unchecked is passed, the
        checkbutton is in a neither-state (pristine)
        Options:
            ${COLOR_BOLD}-t, --text, --content${COLOR_RESET} <text>
                Set the text to be displayed next to the tick.
            ${COLOR_BOLD}-c, --command${COLOR_RESET} <command>
                Code to be executed when the element is clicked. Also see
                --command note below.
            ${COLOR_BOLD}--selected, --checked${COLOR_RESET}
                Set selected state to 1.
            ${COLOR_BOLD}--deselected, --unchecked${COLOR_RESET}
                Set selected state to 0.
        Get:
            Prints 1 when checked, 0 when unchecked, nothing when pristine.
    ${COLOR_BOLD}radiobutton${COLOR_RESET} / radio / r
        Multiple radiobuttons form a group. Only one radiobutton in a group can
        be active at the same time.
        Options:
            [required] ${COLOR_BOLD}--group${COLOR_RESET} <group-id>
                Assign this radiobutton to a group. Can be any string. See 'get'
                below. In contrary to most options, this one can not be changed
                afterwards, meaning if you pass it any other time that on
                element creation, it is ignored.
            ${COLOR_BOLD}-t, --text, --content${COLOR_RESET} <text>
                Set the text to be displayed next to the radiobutton.
            ${COLOR_BOLD}-c, --command${COLOR_RESET} <command>
                Code to be executed when the element is clicked. Also see
                --command note below.
            ${COLOR_BOLD}--selected, --checked${COLOR_RESET}
                Set this radio as the selected one from its group.
        Get:
            Every radiobutton gets internally assigned a number. The first
            radiobutton of a group has the number 0, the second 1, third 2 and
            so on. When you call the 'get' method for any of the radios
            contained in this group, it will print out the number of the
            selected radio (or nothing when pristine) in its group: 0 or 1 or 2
            or whatever. The name of the group does not matter for retrieving
            the value. The group is only needed when a radiobutton is created.
    ${COLOR_BOLD}combobox${COLOR_RESET} / select / dropdown / dropdownmenu / s / c
        Select one of many values. Behaves like a classical HTML-select (the Tk-
        state 'readonly' is active).
        Options:
            ${COLOR_BOLD}-t, --text, --content${COLOR_RESET} <text>
                A pipe-delimited list (e.g. \"option1|option2|option3\") of
                options for this select which the user will be able to choose
                from. Set the default value by appending two pipes. For example
                \"option1|option2||option3\" to have option2 be selected by
                default. Otherwise, the first one would be selected.
            ${COLOR_BOLD}-c, --command${COLOR_RESET} <command>
                Code to be executed when an item is chosen. Also see
                --command note below.
        Get:
            Prints the selected value, e.g. \"option1\" when the first value is
            chosen.

${COLOR_BOLD}General element options${COLOR_RESET}
    ${COLOR_BOLD}-x <x-position>${COLOR_RESET}
    (optional) ${COLOR_BOLD}-X, --relx <x-position>${COLOR_RESET}
    ${COLOR_BOLD}-y <y-position>${COLOR_RESET}
    (optional) ${COLOR_BOLD}-Y, --rely <y-position>${COLOR_RESET}
    ${COLOR_BOLD}-w, --width <width>${COLOR_RESET}
    ${COLOR_BOLD}-h, --height <height>${COLOR_RESET}

    ${COLOR_BOLD}--disabled${COLOR_RESET} <switch>
        Dissables (greys out) the command. Can be used with any element, will
        however take no action  on labels. <switch> is 0 or 1.
    ${COLOR_BOLD}--notheme${COLOR_RESET}
        Make the element ignore the current theme. Can only be used upon element
        creation (ignored in subsequent calls!).
    ${COLOR_BOLD}--foreground, --foregroundcolor, --color, --textcolor, --fg${COLOR_RESET} <color>
        Set the foreground color (typically, text color). Use common color names
        like red, yellow etc. or hex notation #ff1234.
    ${COLOR_BOLD}--background, --backgroundcolor, --bck, --bg${COLOR_RESET} <color>
        Set the background color. Use common color names like red, yellow etc.
        or hex notation like #ff1234.
    ${COLOR_BOLD}--style${COLOR_RESET} <property:value>
        You can set any arbitrary styling option with this syntax, even those
        which are not supported natively by redflux-tkbash. For a list of available
        properties, visit https://www.tcl.tk/man/tcl8.4/TkCmd/options.htm or
        https://wiki.tcl.tk/37973 or ...? (neither of them is complete it
        seems). Example: 'redflux-tkbash mygui mybutton --style \"font:verdana 20\"'

${COLOR_BOLD}Additional notes${COLOR_RESET}
Note on the ${COLOR_BOLD}-c, --command${COLOR_RESET} option: The command contents will be written into
a temp file and then called on action. You can preceed this with your custom
shebang. Thus, session variables cannot be accessed.
"
}


########################### OPTION PARSING & VARIABLES INITIALIZATION

OPTIONS=w:h:x:X:y:Y:c:t:
LONGOPTIONS=help,width:,height:,relx:,rely:,command:,alwaysontop:,maximize,resizable:,text:,content:,tk:,tkcommand:,disabled:,disable:,image:,group:,theme:,title:,iconify,hide,show,close,icon:,alpha:,transparency:,exit,destroy,topmost:,hotkey:,shortcut:,bind:,quit,ignore-return,entry,one-row,ignore-newline,selected,select,check,checked,deselected,unselected,deselect,unselect,unchecked,uncheck,onclose,onexit,onexited,onclosed,exist,exists,notitlebar,nobar,nocaption,nodecorations,nodecoration,overrideredirect,tooltip,popup,onclick,scrollbar:,foreground:,foregroundcolor:,color:,colour:,foregroundcolour:,textcolor:,textcolour:,background:,backgroundcolor:,backgroundcolour:,bck:,bg:,fg:,debug,print,log,notheme,style:,movebymouse:,movewithmouse:,drag:,draggable:
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@") || die 27
if [[ $? -ne 0 ]]; then
	die 2
fi
eval set -- "$PARSED"
while true; do
	case "$1" in
		--help)
			show_help
			exit 0 ;;
		-w|--width) WIDTH="$2" && shift 2 ;;
		-h|--height) HEIGHT="$2" && shift 2 ;;
		-x) X="$2" && shift 2 ;;
		-y) Y="$2" && shift 2 ;;
		-X|--relx) RELX="$2" && shift 2 ;;
		-Y|--rely) RELY="$2" && shift 2 ;;
		-v|--var|--variable) VAR_NAME="$2" && shift 2 ;;
		-c|--command) COMMAND="$2" && shift 2 ;;
		--alwaysontop|--topmost) ALWAYS_ON_TOP="$2" && shift 2 ;;
		--maximize) MAXIMIZE="1" && shift ;;
		--resizable) RESIZABLE="$2" && shift 2 ;;
		--theme) THEME="$2" && shift 2 ;;
		--iconify) ICONIFY="1" && shift ;;
		--hide) HIDE="1" && shift ;;
		--show) SHOW="1" && shift ;;
		--close|--exit|--destroy|--quit) CLOSE="1" && shift ;;
		--title) TITLE="$2" && shift 2 ;;
		--icon) ICON="$2" && shift 2 ;;
		--alpha|--transparency) ALPHA="$2" && shift 2 ;;
		--hotkey|--shortcut|--bind) HOTKEY="$2" && shift 2 ;;
		-t|--text|--content) CONTENT="$2" && shift 2 ;;
		--tk|--tkcommand) TKCOMMAND="$2" && shift 2 ;;
		--disabled|--disable) DISABLED="$2" && shift 2 ;;
		--image) IMAGE="$2" && shift 2 ;;
		--group) GROUP="$2" && shift 2 ;;
		--ignore-return|--ignore-newline|--entry|--one-row) IGNORE_RETURN="1" && shift ;;
		--selected|--select|--check|--checked) SELECTED=1 && shift ;;
		--unselected|--deselected|--unselect|--deselect|--uncheck|--unchecked) SELECTED=0 && shift ;;
		--onclose|--onclosed|--onexit|--onexited) ON_CLOSE=1 && shift ;;
		--exist|--exists) EXIST=1 && shift ;;
		--notitlebar|--nobar|--nocaption|--nodecorations|--nodecoration|--overrideredirect|--tooltip|--popup) NOTITLEBAR=1 && shift ;;
		--onclick) ON_CLICK=1 && shift;;
		--scrollbar) SCROLLBAR="$2" && shift 2 ;;
		--foreground|--foregroundcolor|--color|--colour|--foregroundcolour|--textcolor|--textcolour|--fg) FOREGROUND="$2" && shift 2 ;;
		--background|--backgroundcolor|--backgroundcolour|--bck|--bg) BACKGROUND="$2" && shift 2 ;;
		--debug|--print|--log) DEBUG="1" && shift ;;
		--notheme|--nostyle) NOTHEME="1" && shift ;;
		--style) STYLE="$2" && shift 2 ;;
		--movebymouse|--movewithmouse|--drag|--draggable) MOVE_BY_MOUSE="$2" && shift 2 ;;
		--)
			shift
			break ;;
		*)
			echo "error parsing options ):"
			exit 3 ;;
	esac
done

TMPFILE_APPENDIX="__.__"
GUI_ID="$1"
WISH_PIPE="${TMP}/${GUI_ID}${TMPFILE_APPENDIX}wishpipe"
#WISH_OUTFILE="${TMP}/${GUI_ID}_outfile"
COMMUNICATION_FILE="${TMP}/${GUI_ID}${TMPFILE_APPENDIX}communicationfile"
GET_REQUEST=0
[ -z "$GUI_ID" ] && echo "specify gui id!" && die 1
require_variable() {
	[ -z "$VAR_NAME" ] && echo "specify variable name!" && die 14
	[[ $VAR_NAME == *" "* ]] && echo "variable cannot contain spaces!" && die 21
	[[ $VAR_NAME == "window" ]] && echo "keyword 'window' is preserved." && die 21
	[[ $VAR_NAME == "get" ]] && echo "keyword 'get' is preserved." && die 21
	return 0
}
if [ "$2" = "get" ] && [ $# = 3 ]; then
	ACTION=
	VAR_NAME="$3"
	GET_REQUEST=1
	require_variable
elif [ "$2" = "window" ] && [ $# = 2 ]; then
	ACTION="window"
	echo "The 'window' keyword is no longer needed for global window attributes! You can write 'redflux-tkbash mygui --title hi' now instead of 'redflux-tkbash mygui window --title hi'. But both still work."
	VAR_NAME=
elif [ $# = 2 ]; then
	VAR_NAME="$2"
	require_variable
elif [ $# = 3 ]; then
	ACTION="$2"
	VAR_NAME="$3"
	require_variable
elif [ $# = 1 ]; then
	ACTION="window"
	VAR_NAME=
else
	echo "Too many arguments!" && die 22
fi
[[ "$HOTKEY" == *" "* ]] && echo "hotkey name cannot contain spaces!" && die 21
[[ "$GUI_ID" == *" "* ]] && echo "gui name cannot contain spaces!" && die 21
[[ "$GROUP" == *" "* ]] && echo "group name cannot contain spaces!" && die 21

################################# helper functions

tcl_esc() {
	#todo wtf
	# http://tcl.tk/man/tcl8.5/TclCmd/Tcl.htm
	echo "$1" |sed 's/\\/\\\\/g' |sed 's/"/\\"/g' |sed 's/\$/\\\$/g' |sed 's/\[/\\\[/g' |sed 's/\]/\\\]/g' |sed 's/{/\\{/g' |sed 's/}/\\}/g'
}
tcl_str() {
	local a="$(tcl_esc "$1")"
	echo "\"$a\""
}
# write commands $2 into tmp file with configured name; create proc; so $2 can eventually be run as onaction_$1 (wrapper: onaction $1)
create_command_proc() {
	local commandfile_tcl="\"$(tcl_esc "${TMP}/${GUI_ID}")${TMPFILE_APPENDIX}${1}_command\""
	wish_exec "
		set fileid [ open $commandfile_tcl \"w\" ]
		puts -nonewline \$fileid \"$(tcl_esc "$2")\"
		close \$fileid
		exec chmod +x $commandfile_tcl
		
		proc onaction_$1 {} {
			return [ exec $commandfile_tcl >@stdout 2>@stderr & ]
		}"
}

wish_exec() {
	# communicate unidirectionally with running wish process
	echo "$1" >"$WISH_PIPE"
	[ -v DEBUG ] && echo "$1" >&2
	return 0
}

# TODO: instead of all of this function, and instead of all the WISH_PIPE stuff as well, maybe consider using coproc logic instead. This could help with the back and forth sending of text to wish and simplify the code. Not sure though.
wish_get() {
	# communicate bidirectionally with running wish process
	rm -f "$COMMUNICATION_FILE"
	wish_exec "
		catch {set result [$1] }
		if {[info exists result]} {
			exec echo \$result > $(tcl_str "$COMMUNICATION_FILE")
			unset result
		} else {
			exec echo \"________EMPTY________\" > $(tcl_str "$COMMUNICATION_FILE")
		}" # todo: ^ really bad error handling. use another pipe?

	# wait for response: cannot use timeout due to weird busybox behaviour
	(
		(
			while ! [ -s "$COMMUNICATION_FILE" ]; do
				sleep 0.001
			done
		) &
		local wait_for_response_pid=$!
		trap -- "" SIGTERM
		(
			sleep 1 # wait 1 sec for response at maximum
			kill $wait_for_response_pid || true
		) >/dev/null 2>&1 &
		local terminator_pid=$!
		wait $wait_for_response_pid || return 22
		kill $terminator_pid # doesnt work for some reason, but does not really matter (stops after 1 sec anyway)
	) || return 22

	# parse response
	local wish_response="$(cat "$COMMUNICATION_FILE")"
	rm "$COMMUNICATION_FILE"
	[[ "$wish_response" == "________EMPTY________" ]] && return 220
	echo "$wish_response"
	return 0
}

################################# do things

W_VAR_NAME_ESC="$(tcl_esc .w.$VAR_NAME)"

if [ -n "$EXIST" ]; then
	[[ -p "$WISH_PIPE" ]] && echo 1 || echo 0
	exit 0
fi

if ! [[ -p "$WISH_PIPE" ]]; then
	# gui does not exist yet. initialize stuff
	# set up new pipe
	[[ -f "$WISH_PIPE" ]] && rm "$WISH_PIPE" # can happen unintentionally (multiple calls interfering with each other)
	mkfifo "$WISH_PIPE"
	WISH_PIPE_HELPER=${WISH_PIPE}_
	mkfifo "$WISH_PIPE_HELPER"
	set -m # enable job control (so wishpipe job has its own group)
	(
		# read from wishpipe contineously and pipe to wish.
		# cannot use '|wish' because wish needs to exit by itself (see below) and this job should end afterwards too. --> use wish<pipe syntax
		# cat instead of tail because busybox: https://unix.stackexchange.com/a/392754/103120
		# i have no idea why the very next line is needed but it is. pipe / pipe_helper can also be exchanged in any funny way. could not get it to run without the helper pipe.
		cat 0<> "$WISH_PIPE_HELPER" > "$WISH_PIPE" &
		tail_pid=$!
		wish < "$WISH_PIPE"
		# wish exited. clean up: remove command files, wishpipe etc.
		kill -TERM $tail_pid
		rm "${TMP}/${GUI_ID}${TMPFILE_APPENDIX}"*
		exit 0
	) &
	set +m
	if [ "$NOTITLEBAR" = 1 ]; then # thanks to Donal Fellows! https://stackoverflow.com/a/30885979/3779853
		additional_content_notitlebar="wm overrideredirect .w 1
			wm attribute .w -type toolltip" # it is up to the window manager how to interpret the window type
	fi
	wish_exec "
		# hide default window
		wm withdraw .
		# custom toplevel: .w
		toplevel .w
		proc procExists p {
			# TODO: A good amount of all the tcl code in this file should probably be refactored. Unfortunately, I have no clue of tcl so it is damned to stay for that for quite a while.
			return uplevel 1 [expr {[llength [info procs \$p]] > 0}]
		}
		$additional_content_notitlebar
		# create listenerhandler: execute respective script on command / bind etc. used by -command options below. can be nothing.
		proc onaction {trigger} {
			set e [ procExists onaction_\$trigger ]
			if {\$e == 1} {
				return [ onaction_\$trigger ]
			}
			return -1
		}
		# default: window title = script name
		wm title .w $(tcl_str "$(basename "$0")")
		# on exit: clean up
		proc onexit {} {
			set pid [ onaction onclose ]
			while {[file exists /proc/\$pid]} {
				# onclose action needs to terminate before remaining scripts and pipe can be deleted
				exec /bin/sleep 0.02
			}
			# exec kill -INT -$wish_group_id # need to send 'exit' to tcl instead because tcl canNOT handle signals natively. needed sometimes (to have xclip changes to clipboard be persistent, for example). alternative would be Tcl_finalize from <tcl.h> via custom extension, but redflux-tkbash requires no external lib. thus:
			exit
		}
		# on window close: call custom exit
		wm protocol .w WM_DELETE_WINDOW {
			onexit
		}
		# support move-by-click (window drag+drop) AND set onclick-listener
		set enable_move_by_drag 0
		set borderwidth_before_move_by_drag 0
		set relief_befrore_move_by_drag flat
		set offset_x_before_move_by_drag 0
		set offset_y_before_move_by_drag 0 
		proc topframe_mouse_keydown { window } {
			global enable_move_by_drag borderwidth_before_move_by_drag relief_befrore_move_by_drag offset_x_before_move_by_drag offset_y_before_move_by_drag
			if { \$enable_move_by_drag } {
				set class [ winfo class \$window ]
				# draggable only if mouse over non-interactive element: image, label or root window
				if { [ lsearch { Button TButton Text Checkbutton TCheckbutton Radiobutton TRadiobutton TCombobox } \$class ] < 0 } {
					set borderwidth_before_move_by_drag [ .w cget -borderwidth ]
					set relief_befrore_move_by_drag [ .w cget -relief ]
					set winX [ winfo x .w ]
					set winY [ winfo y .w ]
					set pointerX [ winfo pointerx .w ]
					set pointerY [ winfo pointery .w ]
					set offset_x_before_move_by_drag [ expr { \$pointerX - \$winX } ]
					set offset_y_before_move_by_drag [ expr { \$pointerY - \$winY } ]
					.w configure -borderwidth 3
					.w configure -relief ridge
					after 25 move_by_drag_ticker
				}
			}
		}
		proc move_by_drag_ticker {} {
			global offset_x_before_move_by_drag offset_y_before_move_by_drag
			set pointerX [ winfo pointerx .w ]
			set pointerY [ winfo pointery .w ]
			set geom [ wm geometry .w ]
			scan \$geom \"%dx%d+%d+%d\" width height decorationX decorationY
			set winX [ winfo x .w ]
			set winY [ winfo y .w ]
			set decorationWidth [ expr { \$winX - \$decorationX } ]
			set decorationHeight [ expr { \$winY - \$decorationY } ]
			set new_X [ expr { \$pointerX - \$decorationWidth - \$offset_x_before_move_by_drag } ]
			set new_Y [ expr { \$pointerY - \$decorationHeight - \$offset_y_before_move_by_drag } ]
			wm geometry .w +\$new_X+\$new_Y
			after 25 move_by_drag_ticker
		}
		proc topframe_mouse_keyup {} {
			global enable_move_by_drag borderwidth_before_move_by_drag relief_befrore_move_by_drag
			onaction onclick
			if { \$enable_move_by_drag } {
				.w configure -borderwidth \$borderwidth_before_move_by_drag
				.w configure -relief \$relief_befrore_move_by_drag
				after cancel move_by_drag_ticker
			}
		}
		bind .w <ButtonPress-1> \"topframe_mouse_keydown %W\"
		bind .w <ButtonRelease-1> topframe_mouse_keyup
		"
fi

handle_window_commands() {
	[ -v TITLE ] && wish_exec "wm title .w $(tcl_str "${TITLE}")"
  if ([ -n "$WIDTH" ] && [ -n "$HEIGHT" ]); then
    if ([ -n "$X" ] && [ -n "$Y" ]); then
      wish_exec "wm geometry .w $(tcl_str "${WIDTH}x${HEIGHT}+${X}+${Y}")" # todo independently from w/h
    else
      wish_exec "wm geometry .w $(tcl_str "${WIDTH}x${HEIGHT}")"
    fi
  fi
	[ -n "$ALWAYS_ON_TOP" ] && wish_exec "wm attributes .w -topmost $(tcl_str "$ALWAYS_ON_TOP")"
	[ -n "$MAXIMIZE" ] && wish_exec "wm attributes .w -fullscreen $MAXIMIZE"
	[ -n "$ALPHA" ] && wish_exec "wm attributes .w -alpha $(tcl_str "$ALPHA")"
	[ -n "$ICON" ] && wish_exec "image create photo imgobjicon -file $(tcl_str "${ICON}")" && wish_exec "wm iconphoto .w imgobjicon"
	[ -n "$RESIZABLE" ] && wish_exec "wm resizable .w $RESIZABLE $RESIZABLE"
	[ -n "$THEME" ] && wish_exec "ttk::style theme use $(tcl_str "$THEME")"
	[ -n "$ICONIFY" ] && wish_exec "wm iconify .w"
	[ -n "$HIDE" ] && wish_exec "wm withdraw .w"
	[ -n "$SHOW" ] && wish_exec "wm deiconify .w"
	if [ -n "$CLOSE" ]; then
		wish_exec "onexit"
		while [ -p "$WISH_PIPE" ]; do sleep 0.2; done # wait for pipe to disappear = everything cleaned up. prevents mess when bulk statements with close/create window
	fi
	if [ -n "$HOTKEY" ]; then
		[ ! -v COMMAND ] && echo "hotkey command also needs the --command option." && die 23
		wish_exec "bind .w <$(tcl_esc "$HOTKEY")> \"onaction onhotkey$(tcl_esc "$HOTKEY")\""
		create_command_proc "onhotkey$HOTKEY" "$COMMAND"
	fi
	if [ -n "$ON_CLOSE" ]; then
		[ ! -v COMMAND ] && echo "on-close command also needs the --command option." && die 23
		create_command_proc "onclose" "$COMMAND"
	fi
	if [ -n "$ON_CLICK" ]; then
		[ ! -v COMMAND ] && echo "on-click command also needs the --command option." && die 26
		create_command_proc "onclick" "$COMMAND"
	fi
	[ -v BACKGROUND ] && wish_exec ".w configure -background $(tcl_str "$BACKGROUND")" # todo -v? -n? inconsistent usage
	[ -n "$MOVE_BY_MOUSE" ] && wish_exec "set enable_move_by_drag $(tcl_str "$MOVE_BY_MOUSE")"

	# custom user tk commands to be executed directly
	[ -v TKCOMMAND ] && wish_exec "${TKCOMMAND}"
	return 0
}

analyse_varname() {
	IS_NEW=0
	# (ignore ACTION for already-existing elements) -
	# always get type of given variable
	local resp
	if resp=$(wish_get "exec echo [winfo class $W_VAR_NAME_ESC]"); then
		TYPE="${resp,,}"
	else
		# var still unkwnown -> new element. use given ACTION
		IS_NEW=1
		if ([ -z "$X" ] && [ -z "$RELX" ]) || ([ -z "$Y" ] && [ -z "$RELY" ]) || [ -z "$WIDTH" ] || [ -z "$HEIGHT" ]; then
			echo "New element detected. x (-x or --relx) , y (-y or --rely), width (-w) and height (-h) options required."
			die 6
		fi
		[ -z "$ACTION" ] && echo "element '$VAR_NAME' unknown. If you wanted to add a new element, the syntax is 'redflux-tkbash <gui-id> <element> <variable> --options...'. For editing already existing elements, <element> can be omitted. <variable> can never be omitted." && die 15
		TYPE="${ACTION,,}"
	fi
	return 0
}

themed() {
	[ -v NOTHEME ] && echo $1 || echo "ttk::$1"
}

handle_element_commands() {
	case "$TYPE" in
		tbutton|button|ttk::button|submit|b)
			# set up element
			[ $IS_NEW = 1 ] && wish_exec "$(themed button) $W_VAR_NAME_ESC -command \"onaction $W_VAR_NAME_ESC\""
			# parse non-place options
			[ -v CONTENT ] && wish_exec "$W_VAR_NAME_ESC configure -text $(tcl_str "${CONTENT}")"
			;;
		text|tk::text|input|edit|textfield|textarea|t)
			if [ $IS_NEW = 1 ]; then
				wish_exec "tk::text $W_VAR_NAME_ESC -yscrollcommand \"${W_VAR_NAME_ESC}_scroll_ set\""
				wish_exec "ttk::scrollbar ${W_VAR_NAME_ESC}_scroll_ -command \"$W_VAR_NAME_ESC yview\"" # placed seperately and dynamically below if desired by scrollbar option
			fi
			if [ "$SCROLLBAR" == 0 ]; then
				wish_exec "place forget ${W_VAR_NAME_ESC}_scroll_"
			elif [ "$SCROLLBAR" == 1 ] || [[ "$(wish_get "winfo ismapped ${W_VAR_NAME_ESC}_scroll_")" == 1 ]]; then
				# no scrollbar option, but scrollbar exists: this is a follow-up command for this text-element. in case it contains positional params, update scrollbar:  // todo check -n X || -n Y etc. ?
			 	local text_dimensions=($(wish_get "exec echo \"[winfo x $W_VAR_NAME_ESC] [winfo y $W_VAR_NAME_ESC] [winfo width $W_VAR_NAME_ESC] [winfo height $W_VAR_NAME_ESC]\""))
				[ -z "$X" ] && X=${text_dimensions[0]}; [ -z "$Y" ] && Y=${text_dimensions[1]}; [ -z "$WIDTH" ] && WIDTH=${text_dimensions[2]}; [ -z "$HEIGHT" ] && HEIGHT=${text_dimensions[3]}
				wish_exec "place ${W_VAR_NAME_ESC}_scroll_ -x $((X+WIDTH)) -y $((Y)) -width 16 -height $((HEIGHT))"
			fi
			[ -v CONTENT ] && wish_exec "$W_VAR_NAME_ESC delete 1.0 end" && wish_exec "$W_VAR_NAME_ESC insert 1.0 $(tcl_str "$CONTENT")"
			[ "$IGNORE_RETURN" = 1 ] && wish_exec "bind $W_VAR_NAME_ESC \"<Return>\" { break }"
			;;
		tlabel|timage|label|image|ttk::label|picture|img|bmp|bitmap|png|p|l|i)
			[ $IS_NEW = 1 ] && wish_exec "$(themed label) $W_VAR_NAME_ESC -justify left -anchor nw"
			[ -v CONTENT ] && wish_exec "$W_VAR_NAME_ESC configure -text $(tcl_str "${CONTENT}")"
			[ -v IMAGE ] && wish_exec "image create photo imgobj$W_VAR_NAME_ESC -file $(tcl_str "${IMAGE}")" && wish_exec "$W_VAR_NAME_ESC configure -image imgobj$W_VAR_NAME_ESC"
			[ -n "$WIDTH" ] && wish_exec "$W_VAR_NAME_ESC configure -wraplength $(tcl_str "$WIDTH")" # change width / add element: enable word wrap
			;;
		tcheckbutton|checkbutton|ttk::checkbutton|checkbox|check|tick|toggle|cb)
			[ $IS_NEW = 1 ] && wish_exec "$(themed checkbutton) $W_VAR_NAME_ESC -variable $(tcl_esc $VAR_NAME) -command \"onaction $W_VAR_NAME_ESC\""
			[ -v CONTENT ] && wish_exec "$W_VAR_NAME_ESC configure -text $(tcl_str "${CONTENT}")"
			[ -n "$SELECTED" ] && wish_exec "set $(tcl_esc $VAR_NAME) $SELECTED"
			;;
		tradiobutton|radiobutton|ttk::radiobutton|radio|r)
			if [ $IS_NEW = 1 ]; then
				[ -z "$GROUP" ] && echo "--group required" && die 19
				### determine value: (#radiogroupmembers)+1
				wish_exec "
					set matched_children \"\"
					foreach {child} [winfo children .w] {
						if { ([winfo class \"\$child\"] == \"TRadiobutton\" || [winfo class \"\$child\"] == \"Radiobutton\") && [ \"\$child\" cget -variable] == $(tcl_str "$GROUP") } {
							append matched_children \"\n\${child}\"
						}
					}"
				local groupmembers_amount=$(echo "$(wish_get "exec echo \"\$matched_children\"")" |egrep . |wc -l)
				#zero-indexed:
				local radionumber=$((groupmembers_amount)) # also considers empty response
				###
				wish_exec "$(themed radiobutton) $W_VAR_NAME_ESC -variable $(tcl_esc "${GROUP}") -command \"onaction onradiogroup$(tcl_esc "${GROUP}")\" -value ${radionumber}"
				[ -v COMMAND ] && create_command_proc "onradiogroup$GROUP" "$COMMAND" # radio event in redflux-tkbash works by group, not by element
			 fi
			[ -v CONTENT ] && wish_exec "$W_VAR_NAME_ESC configure -text $(tcl_str "${CONTENT}")"
			if [ "$SELECTED" == 1 ]; then
				local radionumber="$(wish_get "$W_VAR_NAME_ESC cget -value")"
				wish_exec "set $(tcl_esc "$GROUP") $radionumber"
			fi
			;;
		tcombobox|combobox|ttk:combobox|select|dropdown|dropdownmenu|s|c)
			if [ $IS_NEW = 1 ]; then
				wish_exec "ttk::combobox $W_VAR_NAME_ESC -state readonly" # there is no unthemed combobox
				wish_exec "bind $W_VAR_NAME_ESC <<ComboboxSelected>> \"onaction $W_VAR_NAME_ESC\""
			fi
			if [ -n "$CONTENT" ]; then
				IFS='|'; arr=($CONTENT); unset IFS
				[[ "${#arr}" == 0 ]] && echo "invalid content specified. should have form \"option1|option2|option3...\"" && die 20
				local values=
				local selected_index=0
				for i in "${!arr[@]}"; do
					local val="${arr[$i]}"
					[ -z "$val" ] && selected_index=$((i-1)) || # empty val = two pipes in a row = use prev value as selected one.
						values="${values} $(tcl_str "$val")"
				done
				wish_exec "$W_VAR_NAME_ESC configure -values [list $values]"
				wish_exec "$W_VAR_NAME_ESC current $selected_index"
			fi
			;;
		*)
			echo "element >$TYPE< not supported." ; die 5
			;;
	esac
	### general options
	if [ -n "$DISABLED" ]; then
		[ "$DISABLED" = 0 ] && DISABLED=normal || DISABLED=disabled
		wish_exec "$W_VAR_NAME_ESC configure -state ${DISABLED}"
	fi
	# styling
	if ([ -v FOREGROUND ] || [ -v BACKGROUND ] || [ -v STYLE ]); then
		local style=
		[ -v FOREGROUND ] && style+=" -foreground $(tcl_str "$FOREGROUND") "
		[ -v BACKGROUND ] && style+=" -background $(tcl_str "$BACKGROUND") "
		[ -v STYLE ] && style+=" \"-$(tcl_esc "$(cut -d : -f 1 <<<$STYLE)")\" $(tcl_str "$(cut -d : -f 2 <<<$STYLE)") "
		local is_themed=$(wish_get "$W_VAR_NAME_ESC configure -style")
		if [[ -z $is_themed ]]; then
			wish_exec "$W_VAR_NAME_ESC configure $style"
		else
			local class=$(wish_get "winfo class $W_VAR_NAME_ESC") # TYPE cannot be used because it could be "select" instead of "combobox" on creation etc
			# create a new style named after this elements variable exclusively and use it (inherited from current theme's base style). thats not really what styles are for, but the easiest way for this script. (also see http://www.tkdocs.com/tutorial/styles.html)
			wish_exec "ttk::style configure $VAR_NAME.$class $style
				$W_VAR_NAME_ESC configure -style $VAR_NAME.$class"
		fi
	fi
	# create/override command (label -c "..." would be possible, creates file but no action)
	[ -v COMMAND ] && create_command_proc ".w.$VAR_NAME" "$COMMAND"
	# parse place options
	[ -n "$X" ] || [ -n "$Y" ] || [ -n "$RELX" ] || [ -n "$RELY" ] || [ -n "$WIDTH" ] || [ -n "$HEIGHT" ] &&
		wish_exec "place $W_VAR_NAME_ESC ${X:+-x $((X))} ${RELX:+-relx $(tcl_str "$RELX")} ${Y:+-y $((Y))} ${RELY:+-relx $(tcl_str "$RELY")} ${WIDTH:+-width $((WIDTH))} ${HEIGHT:+-height $((HEIGHT))}" # todo X as x ?

	# custom user tk commands to be executed directly
	[ -v TKCOMMAND ] && wish_exec "${W_VAR_NAME_ESC} ${TKCOMMAND}"

	return 0
}

handle_get_commands() {
	case "$TYPE" in
		text)
			echo "$(wish_get "$W_VAR_NAME_ESC get 1.0 end")"
			;;
		tcheckbutton|checkbutton)
			wish_get "exec echo \$$(tcl_esc "$VAR_NAME")"
			;;
		tradiobutton|radiobutton)
			local radio_var="$(wish_get "$W_VAR_NAME_ESC cget -variable")"
			wish_get "exec echo \$$(tcl_esc "$radio_var")"
			;;
		tcombobox|combobox)
			echo "$(wish_get "$W_VAR_NAME_ESC get")"
			;;
		*)
			echo "get-method for this element not supported :(" && exit 12
			;;
	esac
	return 0
}

if [ "$ACTION" = "window" ]; then
	handle_window_commands
else
	analyse_varname

	if [ $GET_REQUEST = 0 ]; then
		# no get, but add/edit instead.
		handle_element_commands
	else
		# get variable value:
		handle_get_commands
	fi
fi

exit 0
